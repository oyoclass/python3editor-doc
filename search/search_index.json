{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Python3? Quote from Python's official website: Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python\u2019s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms. Currently Python has two versions: Python2 and Python3. Python3 is the new version of Python. Quote from wikipedia: Python 3.0 (also called \"Python 3000\" or \"Py3K\") was released on December 3, 2008. It was designed to rectify fundamental design flaws in the language\u2014the changes required could not be implemented while retaining full backwards compatibility with the 2.x series, which necessitated a new major version number. The guiding principle of Python 3 was: \"reduce feature duplication by removing old ways of doing things\". Python2 won't be maintained after January 1, 2020. If you are new to programming, you should learn Python3 instead of Python2. However, if you are already familiar with Python2, learning Python3 will be very easy for you. About OYOclass' Python3 Editor The Python3 Editor is an application built into the OYOclass platform, which can be used to write Python3 code. OYOclass' Python3 Editor uses Python version 3.6 behind the scenes. You can use any of the standard Python3 libraries in Python3 Editor, except the Turtle and tkinter graphic libraries. If you want to use the Turtle library with Python, check out the Python Mini app on OYOclass platform. The following links from Python's official website can help you get started. The Python Tutorial The Python Language Reference The Python Standard Library Quick Start Copy the following code samples to OYOclass' Python3 Editor. Then, click the \"Run\" button. Print print( Hello World ) print(123) print(1 + 2) print(1 + 2 * 3) User Input name = input( What's your name?\\n ) age = input( How old are you?\\n ) print(f Hello {name}, you are {age} years old ) Loop for i in range(1, 6): print( * * i) Call Web API from urllib.request import urlopen import json req = urlopen( https://aws.random.cat/meow ) data = json.loads(req.read()) print(f Open the URL below, you will see a cat: \\n{data['file']} ) Beyond OYOclass' Python3 Editor If you would like to do more with Python and go beyond the capabilities of OYOclass' Python3 Editor, please download and install the Python: Download Python : The version you download from Python's website is most likely greater than or equal to version 3.7. Although OYOclass' Python3 Editor uses Pythonv3.6 behind the scenes, there are not many differences between Python 3.6 and Python 3.7. Python3's Official Documentation Automated Python 2 to 3 code translation Six Library : Six is a Python 2 and 3 compatibility library. It provides utility functions to smooth over the differences between the Python versions. The goal is to write Python code that is compatible in both Python versions. See the documentation for more information on what is provided. Resources in Awesome Python's Repository Renamed modules Python2 import SimpleHTTPServer to Python3 import http.server Python2 import ConfigParser to Python3 import configparser Python2 import SocketServer to Python3 import socketserver Python2 import Tkinter to Python3 import tkinter Python2 import urllib to Python3 import urllib.request, urllib.parse, urllib.error Python2 import urllib2 to Python3 import ullib.request, urllib.error Python2 import urlparse to Python3 import urllib.parse","title":"Home"},{"location":"#what-is-python3","text":"Quote from Python's official website: Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python\u2019s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms. Currently Python has two versions: Python2 and Python3. Python3 is the new version of Python. Quote from wikipedia: Python 3.0 (also called \"Python 3000\" or \"Py3K\") was released on December 3, 2008. It was designed to rectify fundamental design flaws in the language\u2014the changes required could not be implemented while retaining full backwards compatibility with the 2.x series, which necessitated a new major version number. The guiding principle of Python 3 was: \"reduce feature duplication by removing old ways of doing things\". Python2 won't be maintained after January 1, 2020. If you are new to programming, you should learn Python3 instead of Python2. However, if you are already familiar with Python2, learning Python3 will be very easy for you.","title":"What is Python3?"},{"location":"#about-oyoclass-python3-editor","text":"The Python3 Editor is an application built into the OYOclass platform, which can be used to write Python3 code. OYOclass' Python3 Editor uses Python version 3.6 behind the scenes. You can use any of the standard Python3 libraries in Python3 Editor, except the Turtle and tkinter graphic libraries. If you want to use the Turtle library with Python, check out the Python Mini app on OYOclass platform. The following links from Python's official website can help you get started. The Python Tutorial The Python Language Reference The Python Standard Library","title":"About OYOclass' Python3 Editor"},{"location":"#quick-start","text":"Copy the following code samples to OYOclass' Python3 Editor. Then, click the \"Run\" button. Print print( Hello World ) print(123) print(1 + 2) print(1 + 2 * 3) User Input name = input( What's your name?\\n ) age = input( How old are you?\\n ) print(f Hello {name}, you are {age} years old ) Loop for i in range(1, 6): print( * * i) Call Web API from urllib.request import urlopen import json req = urlopen( https://aws.random.cat/meow ) data = json.loads(req.read()) print(f Open the URL below, you will see a cat: \\n{data['file']} )","title":"Quick Start"},{"location":"#beyond-oyoclass-python3-editor","text":"If you would like to do more with Python and go beyond the capabilities of OYOclass' Python3 Editor, please download and install the Python: Download Python : The version you download from Python's website is most likely greater than or equal to version 3.7. Although OYOclass' Python3 Editor uses Pythonv3.6 behind the scenes, there are not many differences between Python 3.6 and Python 3.7. Python3's Official Documentation Automated Python 2 to 3 code translation Six Library : Six is a Python 2 and 3 compatibility library. It provides utility functions to smooth over the differences between the Python versions. The goal is to write Python code that is compatible in both Python versions. See the documentation for more information on what is provided. Resources in Awesome Python's Repository Renamed modules Python2 import SimpleHTTPServer to Python3 import http.server Python2 import ConfigParser to Python3 import configparser Python2 import SocketServer to Python3 import socketserver Python2 import Tkinter to Python3 import tkinter Python2 import urllib to Python3 import urllib.request, urllib.parse, urllib.error Python2 import urllib2 to Python3 import ullib.request, urllib.error Python2 import urlparse to Python3 import urllib.parse","title":"Beyond OYOclass' Python3 Editor"},{"location":"core/boolean/","text":"Boolean Booleans are used to show the logical truth values True and False . Constants True False The following values are considered False : None, False, 0, 0.0, 0j, '', (), [], {}, set([]) Convert Value to Boolean bool(x) : Convert x to True or False Logical Operations and : x and y. This means that if x is False, then x, else y or : x or y. This means that if x is False, then y, else x not : not x. This means that if x is False, then True, else False Example print(True) # True print(1 2) # True print(2 3) # False print(3 = 3) # True print(1 2 and 2 3) # False print(1 2 or 2 3) # True print(not 1 2) # False print(bool(0)) # False print(bool([])) # False print(bool(3)) # True Reference Standard Types at docs.python.org","title":"Boolean"},{"location":"core/boolean/#boolean","text":"Booleans are used to show the logical truth values True and False .","title":"Boolean"},{"location":"core/boolean/#constants","text":"True False The following values are considered False : None, False, 0, 0.0, 0j, '', (), [], {}, set([])","title":"Constants"},{"location":"core/boolean/#convert-value-to-boolean","text":"bool(x) : Convert x to True or False","title":"Convert Value to Boolean"},{"location":"core/boolean/#logical-operations","text":"and : x and y. This means that if x is False, then x, else y or : x or y. This means that if x is False, then y, else x not : not x. This means that if x is False, then True, else False","title":"Logical Operations"},{"location":"core/boolean/#example","text":"print(True) # True print(1 2) # True print(2 3) # False print(3 = 3) # True print(1 2 and 2 3) # False print(1 2 or 2 3) # True print(not 1 2) # False print(bool(0)) # False print(bool([])) # False print(bool(3)) # True","title":"Example"},{"location":"core/boolean/#reference","text":"Standard Types at docs.python.org","title":"Reference"},{"location":"core/comments/","text":"Comments Comments are used in Python to allow programmers to write notes in their code. These lines of code will not be run by the interpreter. There are 2 ways to do this in Python. Single Line Comments (#) In Python, you can use the \"#\" symbol to write comments that take up one line. Example #This is a comment print( hello ) In the code sample above, it would only print the word \"hello\". The code snippet above would not print the words \"This is a comment\". Multi-line Comments In Python, you can use triple quotes to write comments that take up multiple lines. Example ''' This is a multi-lined comment. This uses single-quotes to make this comment. These are called triple quotes because there are 3 quotes at the beginning and the end of the quote. ''' print( world ) This is a multi-lined comment. This uses double-quotes to make this comment. These are called triple quotes because there are 3 quotes at the beginning and the end of the quote. In the code sample above, it would only print the word \"world\". The statement above would not print the explanation in the first and second comment.","title":"Comments"},{"location":"core/comments/#comments","text":"Comments are used in Python to allow programmers to write notes in their code. These lines of code will not be run by the interpreter. There are 2 ways to do this in Python.","title":"Comments"},{"location":"core/comments/#single-line-comments","text":"In Python, you can use the \"#\" symbol to write comments that take up one line.","title":"Single Line Comments (#)"},{"location":"core/comments/#example","text":"#This is a comment print( hello ) In the code sample above, it would only print the word \"hello\". The code snippet above would not print the words \"This is a comment\".","title":"Example"},{"location":"core/comments/#multi-line-comments","text":"In Python, you can use triple quotes to write comments that take up multiple lines.","title":"Multi-line Comments"},{"location":"core/comments/#example_1","text":"''' This is a multi-lined comment. This uses single-quotes to make this comment. These are called triple quotes because there are 3 quotes at the beginning and the end of the quote. ''' print( world ) This is a multi-lined comment. This uses double-quotes to make this comment. These are called triple quotes because there are 3 quotes at the beginning and the end of the quote. In the code sample above, it would only print the word \"world\". The statement above would not print the explanation in the first and second comment.","title":"Example"},{"location":"core/comparison/","text":"Comparison Comparison operations are supported by all objects. They all have the same priority (which is higher than that those of the Boolean operations). Operations : strictly less than = : less than or equal to : strictly greater than = : greater than or equal to == : equal != : not equal is : object identity is not : negated object identity Example print(2 != 3) # True print(5 = 4) # True print(2 is 2) # True print(300 is 300) # True num = 350 print(num is not 350) # False Reference Comparisons at docs.python.org","title":"Comparison"},{"location":"core/comparison/#comparison","text":"Comparison operations are supported by all objects. They all have the same priority (which is higher than that those of the Boolean operations).","title":"Comparison"},{"location":"core/comparison/#operations","text":": strictly less than = : less than or equal to : strictly greater than = : greater than or equal to == : equal != : not equal is : object identity is not : negated object identity","title":"Operations"},{"location":"core/comparison/#example","text":"print(2 != 3) # True print(5 = 4) # True print(2 is 2) # True print(300 is 300) # True num = 350 print(num is not 350) # False","title":"Example"},{"location":"core/comparison/#reference","text":"Comparisons at docs.python.org","title":"Reference"},{"location":"core/dictionary/","text":"Dictionary Dictionaries are sometimes found in other languages such as \u201cassociative memories\u201d and \u201cassociative arrays\u201d. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type. It is best to think of a dictionary as an unordered set of key-value pairs, where all the keys must be unique. A pair of curly braces creates an empty dictionary: {} . When you place values in a dictionary, you must write the key-value pair like this: key: value . Functions dict.clear() : Removes all items from the dictionary. dict.get(key[, default]) : Returns the value for key if key is in the dictionary, else default. If default is not given, it defaults to None , so that this method never raises a KeyError . key in dict : Returns True if d has key key , else False . dict.items() : Returns a new view of the dictionary\u2019s items ( (key, value) pairs). dict.keys() : Returns a new view of the dictionary\u2019s keys. dict.pop(key[, default]) : If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised. dict.setdefault(key[, default]) : If key is in the dictionary, return its value. If not, insert key with a value of default and return default . default defaults to None . dict.update([other]) : Updates the dictionary with the key/value pairs from other , overwriting existing keys. Returns None . dict.values() : Returns a new view of the dictionary\u2019s values. Example a = { name : Bo , age : 20} print( name in a) # True print(a.keys()) # dict_keys(['name', 'age']) print(a.values()) # dict_values(['Bo', 20]) a.setdefault( gender , m ) print(a) # {'name': 'Bo', 'age': 20, 'gender': 'm'} a.update({ city : Stony Brook }) print(a) # {'name': 'Bo', 'age': 20, 'gender': 'm', 'city': 'Stony Brook'} Change from Python2 The has_key(key) function is no longer supported in Python3. Reference Dictionary as a Data Structure at docs.python.org Dict as a Mapping Type at docs.python.org","title":"Dictionary"},{"location":"core/dictionary/#dictionary","text":"Dictionaries are sometimes found in other languages such as \u201cassociative memories\u201d and \u201cassociative arrays\u201d. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type. It is best to think of a dictionary as an unordered set of key-value pairs, where all the keys must be unique. A pair of curly braces creates an empty dictionary: {} . When you place values in a dictionary, you must write the key-value pair like this: key: value .","title":"Dictionary"},{"location":"core/dictionary/#functions","text":"dict.clear() : Removes all items from the dictionary. dict.get(key[, default]) : Returns the value for key if key is in the dictionary, else default. If default is not given, it defaults to None , so that this method never raises a KeyError . key in dict : Returns True if d has key key , else False . dict.items() : Returns a new view of the dictionary\u2019s items ( (key, value) pairs). dict.keys() : Returns a new view of the dictionary\u2019s keys. dict.pop(key[, default]) : If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised. dict.setdefault(key[, default]) : If key is in the dictionary, return its value. If not, insert key with a value of default and return default . default defaults to None . dict.update([other]) : Updates the dictionary with the key/value pairs from other , overwriting existing keys. Returns None . dict.values() : Returns a new view of the dictionary\u2019s values.","title":"Functions"},{"location":"core/dictionary/#example","text":"a = { name : Bo , age : 20} print( name in a) # True print(a.keys()) # dict_keys(['name', 'age']) print(a.values()) # dict_values(['Bo', 20]) a.setdefault( gender , m ) print(a) # {'name': 'Bo', 'age': 20, 'gender': 'm'} a.update({ city : Stony Brook }) print(a) # {'name': 'Bo', 'age': 20, 'gender': 'm', 'city': 'Stony Brook'}","title":"Example"},{"location":"core/dictionary/#change-from-python2","text":"The has_key(key) function is no longer supported in Python3.","title":"Change from Python2"},{"location":"core/dictionary/#reference","text":"Dictionary as a Data Structure at docs.python.org Dict as a Mapping Type at docs.python.org","title":"Reference"},{"location":"core/function/","text":"Functions Most of the functions work the same way in both Python2 and Python3. However, there are a few functions that have different return types. For example, the round() function in Python2 returns a floating-point number, while round in Python3 returns an integer (unless specified). Below are a list of commonly used built-in functions. Built-in functions abs all any bin bool chr dict dir divmod enumerate filter float hex int isinstance issubclass len list long map max min oct ord pow print range raw_input reduce repr reversed round set slice sorted str sum tuple xrange zip For information about how to use the above functions, check out built-in functions on Python's official documentation. Example print(bin(3)) # 0b11 print(hex(255)) # 0xff print(abs(-5)) # 5 print(pow(3, 2)) # 9 print(round(3.5)) # 4 print(round(3.2)) # 3 print(oct(8)) # 0o10 print(ord('A')) # 65 print(chr(97)) # a a = [1,4,5,2,3] print(sorted(a)) # [1, 2, 3, 4, 5] User-defined functions You can define your own function by using the def keyword. Example: def my_add(a, b): c = a + b return c print(my_add(1, 2)) # 3 Reference Built-in functions at docs.python.org","title":"Function"},{"location":"core/function/#functions","text":"Most of the functions work the same way in both Python2 and Python3. However, there are a few functions that have different return types. For example, the round() function in Python2 returns a floating-point number, while round in Python3 returns an integer (unless specified). Below are a list of commonly used built-in functions.","title":"Functions"},{"location":"core/function/#built-in-functions","text":"abs all any bin bool chr dict dir divmod enumerate filter float hex int isinstance issubclass len list long map max min oct ord pow print range raw_input reduce repr reversed round set slice sorted str sum tuple xrange zip For information about how to use the above functions, check out built-in functions on Python's official documentation.","title":"Built-in functions"},{"location":"core/function/#example","text":"print(bin(3)) # 0b11 print(hex(255)) # 0xff print(abs(-5)) # 5 print(pow(3, 2)) # 9 print(round(3.5)) # 4 print(round(3.2)) # 3 print(oct(8)) # 0o10 print(ord('A')) # 65 print(chr(97)) # a a = [1,4,5,2,3] print(sorted(a)) # [1, 2, 3, 4, 5]","title":"Example"},{"location":"core/function/#user-defined-functions","text":"You can define your own function by using the def keyword. Example: def my_add(a, b): c = a + b return c print(my_add(1, 2)) # 3","title":"User-defined functions"},{"location":"core/function/#reference","text":"Built-in functions at docs.python.org","title":"Reference"},{"location":"core/inputoutput/","text":"Standard Output and Input Standard Output The most common way to output something is using print function: print(2 * 3) print( hello ) arr = [1, 2, 3, 4] print(arr) Output: 6 hello [1, 2, 3, 4] Or you can use sys.stdout.write : from sys import stdout arr = [1, 2, 3, 4] stdout.write( hello ) stdout.write(str(arr)) Note: The parameter of write must be a String. Output: hello [1, 2, 3, 4] Standard Input To get user input, you can use the input function: name = input( What's your name? ) print hello , name Change from Python2 The raw_input function from Python2 is no longer supported in Python3. The input() function in Python3 works the same way as the raw_input() function in Python2. The input() function in Python3 always returns a String. You must cast the variable to use the variable as a different type. num = input( Give me a number ) print(num) # 12 print(num * 2) # 1212 # now convert it to number num = int(num) print(num * 2) # 24 You can also read user's input by using sys.stdin.read or sys.stdin.readline : from sys import stdin name = stdin.readline() print(name) # Only reads 3 characters name = stdin.readline(3) print(name)","title":"Standard Input & Output"},{"location":"core/inputoutput/#standard-output-and-input","text":"","title":"Standard Output and Input"},{"location":"core/inputoutput/#standard-output","text":"The most common way to output something is using print function: print(2 * 3) print( hello ) arr = [1, 2, 3, 4] print(arr) Output: 6 hello [1, 2, 3, 4] Or you can use sys.stdout.write : from sys import stdout arr = [1, 2, 3, 4] stdout.write( hello ) stdout.write(str(arr)) Note: The parameter of write must be a String. Output: hello [1, 2, 3, 4]","title":"Standard Output"},{"location":"core/inputoutput/#standard-input","text":"To get user input, you can use the input function: name = input( What's your name? ) print hello , name","title":"Standard Input"},{"location":"core/inputoutput/#change-from-python2","text":"The raw_input function from Python2 is no longer supported in Python3. The input() function in Python3 works the same way as the raw_input() function in Python2. The input() function in Python3 always returns a String. You must cast the variable to use the variable as a different type. num = input( Give me a number ) print(num) # 12 print(num * 2) # 1212 # now convert it to number num = int(num) print(num * 2) # 24 You can also read user's input by using sys.stdin.read or sys.stdin.readline : from sys import stdin name = stdin.readline() print(name) # Only reads 3 characters name = stdin.readline(3) print(name)","title":"Change from Python2"},{"location":"core/listtuple/","text":"List Lists are used to group together values. They consist of a group of values or items, separated by commas, between square brackets. Lists might contain items of different types, but usually the items in a list have the same type. The index in a list starts at 0, and you can visit last element using index -1. a = [1, 5, 2, 3] print(a[0]) # 1 print(a[1]) # 5 print(a[-1]) # 3 print(a[1:3]) # Get elements from index 1 to index 3 (exclusive), i.e. [5, 2] Change the element at a index: a = [1, 5, 2, 3] a[1] = 7 print(a) # [1, 7, 2, 3] To check if an element is in a list, you can use the in operator: a = [1, 5, 2, 3] print(5 in a) # True Use the len function to get the length (number of elements) of a list: a = [1, 5, 2, 3] print(len(a)) # 4 Functions for Lists list.append(x) list.count(x) list.extend(L) list.index(x) list.insert(i, x) list.pop([i]) list.remove(x) list.reverse() list.sort(cmp=None, key=None, reverse=False) For instructions on how to use these functions, check out list functions in Python's official documentation. Example a = [1, 5, 2, 3] a.append(6) print(a) # [1, 5, 2, 3, 6] print(a.count(5)) # 1 a.remove(2) print(a) # [1, 5, 3, 6] a.reverse() print(a) # [6, 3, 5, 1] a.sort() print(a) # [1, 3, 5, 6] Tuple Tuples are similar to lists. The main difference is that lists are mutable and tuples are immutable. Once you define a tuple within parentheses () , you can not change the elements of the tuple. b = (1, 5, 2, 3) b.append(6) # This will give an error, since b is a tuple and immutable. Conversion between Tuple and List Although a tuple cannot be changed, you can convert it to list, make changes, and then convert it back to tuple. You can do this with the tuple and list functions. b = (1, 5, 2, 3) b = list(b) # Convert tuple to list b.append(6) # Change list - append one more element b = tuple(b) # Convert list to tuple print(b) # (1, 5, 2, 3, 6) Reference Introduction of Lists on docs.python.org More on Lists on docs.python.org","title":"List & Tuple"},{"location":"core/listtuple/#list","text":"Lists are used to group together values. They consist of a group of values or items, separated by commas, between square brackets. Lists might contain items of different types, but usually the items in a list have the same type. The index in a list starts at 0, and you can visit last element using index -1. a = [1, 5, 2, 3] print(a[0]) # 1 print(a[1]) # 5 print(a[-1]) # 3 print(a[1:3]) # Get elements from index 1 to index 3 (exclusive), i.e. [5, 2] Change the element at a index: a = [1, 5, 2, 3] a[1] = 7 print(a) # [1, 7, 2, 3] To check if an element is in a list, you can use the in operator: a = [1, 5, 2, 3] print(5 in a) # True Use the len function to get the length (number of elements) of a list: a = [1, 5, 2, 3] print(len(a)) # 4","title":"List"},{"location":"core/listtuple/#functions-for-lists","text":"list.append(x) list.count(x) list.extend(L) list.index(x) list.insert(i, x) list.pop([i]) list.remove(x) list.reverse() list.sort(cmp=None, key=None, reverse=False) For instructions on how to use these functions, check out list functions in Python's official documentation.","title":"Functions for Lists"},{"location":"core/listtuple/#example","text":"a = [1, 5, 2, 3] a.append(6) print(a) # [1, 5, 2, 3, 6] print(a.count(5)) # 1 a.remove(2) print(a) # [1, 5, 3, 6] a.reverse() print(a) # [6, 3, 5, 1] a.sort() print(a) # [1, 3, 5, 6]","title":"Example"},{"location":"core/listtuple/#tuple","text":"Tuples are similar to lists. The main difference is that lists are mutable and tuples are immutable. Once you define a tuple within parentheses () , you can not change the elements of the tuple. b = (1, 5, 2, 3) b.append(6) # This will give an error, since b is a tuple and immutable.","title":"Tuple"},{"location":"core/listtuple/#conversion-between-tuple-and-list","text":"Although a tuple cannot be changed, you can convert it to list, make changes, and then convert it back to tuple. You can do this with the tuple and list functions. b = (1, 5, 2, 3) b = list(b) # Convert tuple to list b.append(6) # Change list - append one more element b = tuple(b) # Convert list to tuple print(b) # (1, 5, 2, 3, 6)","title":"Conversion between Tuple and List"},{"location":"core/listtuple/#reference","text":"Introduction of Lists on docs.python.org More on Lists on docs.python.org","title":"Reference"},{"location":"core/none/","text":"None None is frequently used to represent the absence of a value. An example of this is when default arguments are not passed to a function. Example a = None print(a) # None print(a is None) # True Reference None at docs.python.org","title":"None"},{"location":"core/none/#none","text":"None is frequently used to represent the absence of a value. An example of this is when default arguments are not passed to a function.","title":"None"},{"location":"core/none/#example","text":"a = None print(a) # None print(a is None) # True","title":"Example"},{"location":"core/none/#reference","text":"None at docs.python.org","title":"Reference"},{"location":"core/number/","text":"Number You can use integer and floating-point numbers in Python3. For example, a = 1 b = 2 print(a + b) # 3 print(b * 3) # 6 print(1 + 2 * 3) # 7 print((1 + 2) * 3) # 9 c = 1.5 print(c * 2) # 3.0 print(1 / 3) # 0.3333333333333333 print(1.0 / 3) # 0.3333333333333333 Converting Numbers to Integer and Floating-Point Numbers: int(x) : Converts x to integer float(x) : Converts x to floating-point number Example: print(int(12.3)) # 12 print(int( 234 )) # 234 print(float(12)) # 12.0 Differences Between Python2 and Python3 In Python2: x = 5 / 2.0 # x = 2.5 x = 5 / 2 # x = 2 x = 5 // 2 # x = 2 In Python3: x = 5 / 2.0 # x = 2.5 x = 5 / 2 # x = 2.5 x = 5 // 2 # x = 2 The main difference for the mathematical operations between Python2 and Python3 is 5 / 2 . In Python2, single-slash division returns integer divison . This means that the remainder part of the result is discarded. In Python3, single-slash division returns regular division , where the remainder remains a part of the answer. When you do floor division ( 5 // 2 ) or an integer divided by a float ( 5 / 2.0 ), the result is the same in both Python 2 and Python3. Major Change from Python2 The long type in Python has been removed. There are no long-type integers in Python3. Reference Numeric Types at docs.python.org","title":"Number"},{"location":"core/number/#number","text":"You can use integer and floating-point numbers in Python3. For example, a = 1 b = 2 print(a + b) # 3 print(b * 3) # 6 print(1 + 2 * 3) # 7 print((1 + 2) * 3) # 9 c = 1.5 print(c * 2) # 3.0 print(1 / 3) # 0.3333333333333333 print(1.0 / 3) # 0.3333333333333333","title":"Number"},{"location":"core/number/#converting-numbers-to-integer-and-floating-point-numbers","text":"int(x) : Converts x to integer float(x) : Converts x to floating-point number Example: print(int(12.3)) # 12 print(int( 234 )) # 234 print(float(12)) # 12.0","title":"Converting Numbers to Integer and Floating-Point Numbers:"},{"location":"core/number/#differences-between-python2-and-python3","text":"In Python2: x = 5 / 2.0 # x = 2.5 x = 5 / 2 # x = 2 x = 5 // 2 # x = 2 In Python3: x = 5 / 2.0 # x = 2.5 x = 5 / 2 # x = 2.5 x = 5 // 2 # x = 2 The main difference for the mathematical operations between Python2 and Python3 is 5 / 2 . In Python2, single-slash division returns integer divison . This means that the remainder part of the result is discarded. In Python3, single-slash division returns regular division , where the remainder remains a part of the answer. When you do floor division ( 5 // 2 ) or an integer divided by a float ( 5 / 2.0 ), the result is the same in both Python 2 and Python3.","title":"Differences Between Python2 and Python3"},{"location":"core/number/#major-change-from-python2","text":"The long type in Python has been removed. There are no long-type integers in Python3.","title":"Major Change from Python2"},{"location":"core/number/#reference","text":"Numeric Types at docs.python.org","title":"Reference"},{"location":"core/set/","text":"Set A set is an unordered collection with no duplicate elements. Basic uses of sets include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference. You can use the set() function to make a set. Here is a quick example: basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana'] fruit = set(basket) print(fruit) # {'apple', 'orange', 'pear', 'banana'} Empty Sets Sets in Python3 are enclosed in curly braces ( {} ). However, in order to create an empty set, you would not use a set of empty curly braces ( {} ). To create an empty set, you would use the set() function with no parameters. var1 = set() var2 = {} print(type(var1)) # class 'set' print(type(var2)) # class 'dict' Functions set.add(elem) : Adds element elem to the set. set.copy() : Returns a new set that is shallow copy of set . set.difference(*others) : Returns a new set with elements that are in the set that are not in the others . set - other : Functions the same as set.difference(other) . set.difference_update(*others) : Updates the set, removing elements found in others. set.discard(elem) : Removes element elem from the set if it is present. set.intersection(others) : Returns a new set with elements common to the set and all others . set.intersection_update(others) : Updates the set, keeping only elements found in it and all others . set.isdisjoint(other) : Returns True if the set has no elements in common with other. Sets are disjoint if and only if their intersection is the empty set. set.issubset(other) : Test whether every element in the set is in other . set = other : Test whether every element is in other . set other : Test whether the set is a proper subset of other ( set = other and set != other ). set.issuperset(other) : Test whether every element in other is in the set. set = other : Test whether every element in other is in the set. set other : Test whether the set is a proper superset of other ( set = other and set != other ). set.pop() : Removes and returns an arbitrary element from the set. set.remove(elem) : Remove element elem from the set. set.symmetric_difference(other) : Returns a new set with elements in either the set or other but not both . set ^ other : Returns a set with elements in either the set or other but not both . set.symmetric_difference_update(other) : Updates the set, keeping only elements found in either set, but not in both . set.union(others) : Returns a new set with elements from the set and all others . set | other : Returns a new set with elements from the set and other . set.update(*others) : Updates the set, adding elements from all others . Example a = set() a.add(1) a.add(2) a.add(1) print(a) # {1, 2} print(len(a)) # 2 b = set([2,2,3]) print(b) # {2, 3} print(a.intersection(b)) # {2} c = set([3]) print(b.issuperset(c)) # True print(a ^ b) # {1, 3} print(a = b) # False print(c = c) # True print(c c) # False print(a.union(b)) # {1, 2, 3} Reference Sets as a Data Structure on docs.python.org . Set as a Built-in Type on docs.python.org .","title":"Set"},{"location":"core/set/#set","text":"A set is an unordered collection with no duplicate elements. Basic uses of sets include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference. You can use the set() function to make a set. Here is a quick example: basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana'] fruit = set(basket) print(fruit) # {'apple', 'orange', 'pear', 'banana'}","title":"Set"},{"location":"core/set/#empty-sets","text":"Sets in Python3 are enclosed in curly braces ( {} ). However, in order to create an empty set, you would not use a set of empty curly braces ( {} ). To create an empty set, you would use the set() function with no parameters. var1 = set() var2 = {} print(type(var1)) # class 'set' print(type(var2)) # class 'dict'","title":"Empty Sets"},{"location":"core/set/#functions","text":"set.add(elem) : Adds element elem to the set. set.copy() : Returns a new set that is shallow copy of set . set.difference(*others) : Returns a new set with elements that are in the set that are not in the others . set - other : Functions the same as set.difference(other) . set.difference_update(*others) : Updates the set, removing elements found in others. set.discard(elem) : Removes element elem from the set if it is present. set.intersection(others) : Returns a new set with elements common to the set and all others . set.intersection_update(others) : Updates the set, keeping only elements found in it and all others . set.isdisjoint(other) : Returns True if the set has no elements in common with other. Sets are disjoint if and only if their intersection is the empty set. set.issubset(other) : Test whether every element in the set is in other . set = other : Test whether every element is in other . set other : Test whether the set is a proper subset of other ( set = other and set != other ). set.issuperset(other) : Test whether every element in other is in the set. set = other : Test whether every element in other is in the set. set other : Test whether the set is a proper superset of other ( set = other and set != other ). set.pop() : Removes and returns an arbitrary element from the set. set.remove(elem) : Remove element elem from the set. set.symmetric_difference(other) : Returns a new set with elements in either the set or other but not both . set ^ other : Returns a set with elements in either the set or other but not both . set.symmetric_difference_update(other) : Updates the set, keeping only elements found in either set, but not in both . set.union(others) : Returns a new set with elements from the set and all others . set | other : Returns a new set with elements from the set and other . set.update(*others) : Updates the set, adding elements from all others .","title":"Functions"},{"location":"core/set/#example","text":"a = set() a.add(1) a.add(2) a.add(1) print(a) # {1, 2} print(len(a)) # 2 b = set([2,2,3]) print(b) # {2, 3} print(a.intersection(b)) # {2} c = set([3]) print(b.issuperset(c)) # True print(a ^ b) # {1, 3} print(a = b) # False print(c = c) # True print(c c) # False print(a.union(b)) # {1, 2, 3}","title":"Example"},{"location":"core/set/#reference","text":"Sets as a Data Structure on docs.python.org . Set as a Built-in Type on docs.python.org .","title":"Reference"},{"location":"core/string/","text":"String You can define a string using two single-quotes, two double-quotes, or two triple-quotes. For example, you can declare a string using s = \"hello\" . Once you have a string, you can apply any of the methods listed in the functions portion. Formatting Strings in Python In Python2: i = 1 s = abc mystr1 = {} {} .format(i, s) mystr2 = %d %s % (i, s) print(mystr1) #1 abc print(mystr2) #1 abc In Python3: i = 1 s = abc mystr1 = {} {} .format(i, s) mystr2 = f {i} {s} print(mystr1) #1 abc print(mystr2) #1 abc There are multiple ways to format strings in Python2 and Python3. If you look at the above examples, you can see that \"{} {}\".format(i, s) works in both Python2 and Python3. In Python2, you can use the % operator with strings to format strings through string interpolation . You should not use this function in Python3 because it is deprecated . The new way to do string interpolation in Python3 is through the use of the f operator. Functions str.capitalize() str.center(width[, fillchar]) str.count(sub[, start[, end]]) str.endswith(suffix) str.expandtabs([tabsize]) str.find(sub[, start[, end]]) str.format(*args, **kwargs) str.index(sub[, start[, end]]) str.isalnum() str.isalpha() str.isdigit() str.islower() str.isnumeric() str.isspace() str.istitle() str.isupper() str.join(iterable) str.ljust(width[, fillchar]) str.lower() str.lstrip([chars]) str.partition(sep) str.replace(old, new[, count]) str.rfind(sub[, start[, end]]) str.rindex(sub[, start[, end]]) str.rjust(width[, fillchar]) str.rpartition(sep) str.rstrip([chars]) str.split( sep=None, maxsplit=-1 ) str.splitlines([keepends]) str.startswith(prefix[, start[, end]]) str.strip([chars]) str.swapcase() str.title() str.upper() str.zfill(width) For information about how to use above functions, check out String Methods in Python's official documentation. Example a = hello world print(a.capitalize()) # Hello world print(a.upper()) # HELLO WORLD print(a.find( world )) # 6 print(a.split()) # ['hello', 'world'] print(a.isalnum()) # False b = hello {0} {1} print(b.format( Albert , Einstein )) # hello Albert Einstein Reference String methods at docs.python.org","title":"String"},{"location":"core/string/#string","text":"You can define a string using two single-quotes, two double-quotes, or two triple-quotes. For example, you can declare a string using s = \"hello\" . Once you have a string, you can apply any of the methods listed in the functions portion.","title":"String"},{"location":"core/string/#formatting-strings-in-python","text":"In Python2: i = 1 s = abc mystr1 = {} {} .format(i, s) mystr2 = %d %s % (i, s) print(mystr1) #1 abc print(mystr2) #1 abc In Python3: i = 1 s = abc mystr1 = {} {} .format(i, s) mystr2 = f {i} {s} print(mystr1) #1 abc print(mystr2) #1 abc There are multiple ways to format strings in Python2 and Python3. If you look at the above examples, you can see that \"{} {}\".format(i, s) works in both Python2 and Python3. In Python2, you can use the % operator with strings to format strings through string interpolation . You should not use this function in Python3 because it is deprecated . The new way to do string interpolation in Python3 is through the use of the f operator.","title":"Formatting Strings in Python"},{"location":"core/string/#functions","text":"str.capitalize() str.center(width[, fillchar]) str.count(sub[, start[, end]]) str.endswith(suffix) str.expandtabs([tabsize]) str.find(sub[, start[, end]]) str.format(*args, **kwargs) str.index(sub[, start[, end]]) str.isalnum() str.isalpha() str.isdigit() str.islower() str.isnumeric() str.isspace() str.istitle() str.isupper() str.join(iterable) str.ljust(width[, fillchar]) str.lower() str.lstrip([chars]) str.partition(sep) str.replace(old, new[, count]) str.rfind(sub[, start[, end]]) str.rindex(sub[, start[, end]]) str.rjust(width[, fillchar]) str.rpartition(sep) str.rstrip([chars]) str.split( sep=None, maxsplit=-1 ) str.splitlines([keepends]) str.startswith(prefix[, start[, end]]) str.strip([chars]) str.swapcase() str.title() str.upper() str.zfill(width) For information about how to use above functions, check out String Methods in Python's official documentation.","title":"Functions"},{"location":"core/string/#example","text":"a = hello world print(a.capitalize()) # Hello world print(a.upper()) # HELLO WORLD print(a.find( world )) # 6 print(a.split()) # ['hello', 'world'] print(a.isalnum()) # False b = hello {0} {1} print(b.format( Albert , Einstein )) # hello Albert Einstein","title":"Example"},{"location":"core/string/#reference","text":"String methods at docs.python.org","title":"Reference"},{"location":"modules/","text":"Standard Python Libraries The OYOclass Python3 Editor is based on Python 3.6, so technically you can use any of the standard Python3.6 libraries in the editor, except the Turtle and tkinter graphic libraries. Here we list some libraries as examples, for more you could find all libraries in Python's official documents. math library random library string library time library","title":"Intro"},{"location":"modules/#standard-python-libraries","text":"The OYOclass Python3 Editor is based on Python 3.6, so technically you can use any of the standard Python3.6 libraries in the editor, except the Turtle and tkinter graphic libraries. Here we list some libraries as examples, for more you could find all libraries in Python's official documents. math library random library string library time library","title":"Standard Python Libraries"},{"location":"modules/math/","text":"math \u2014 Mathematical Functions This module contains mathematical operations. In order to use these functions, you should import math at the start of your file. Constants math.e : The mathematical constant e = 2.718281... to available precision. math.pi : The mathematical constant \u03c0 = 3.141592... to available precision. Some Functions math.acos(x) : Returns the arccosine of x in radians. math.acosh(x) : Returns the inverse hyperbolic cosine of x . math.asin(x) : Returns the arcsine of x in radians. math.asinh(x) : Returns the inverse hyperbolic sine of x . math.atan(x) : Returns the arctangent of x in radians. math.atan2(y, x) : Returns atan(y / x) in radians. The result is between -pi and pi. math.atanh(x) : Returns the inverse hyperbolic tangent of x . math.ceil(x) : Returns the ceiling of x as a float, which is the smallest integer value greater than or equal to x . math.copysign(x, y) : Returns x with the sign of y . On a platform that supports signed zeros, copysign(1.0, -0.0) returns -1.0. math.cos(x) : Returns the cosine of x radians. math.cosh(x) : Returns the hyperbolic cosine of x . math.degrees(x) : Converts angle x from radians to degrees. math.exp(x) : Returns e** x . math.fabs(x) : Returns the absolute value of x . math.factorial(x) : Returns x factorial. math.floor(x) : Returns the floor of x as a float, the largest integer value less than or equal to x . math.hypot(x, y) : Returns the Euclidean norm, sqrt(x*x + y*y) . This is the length of the vector from the origin to point (x, y) . math.log(x[,base]) : With one argument, the function returns the natural logarithm of x (to base e ). With two arguments, it returns the logarithm of x to the given base, calculated as log(x)/log(base) . math.log10(x) : Returns the base-10 logarithm of x . This is usually more accurate than log(x, 10) . math.pow(x, y) : Returns x raised to the power y . math.radians : Converts angle x from degrees to radians. math.sin(x) : Returns the sine of x radians. math.sinh(x) : Returns the hyperbolic sine of x . math.sqrt(x) : Returns the square root of x . math.tan(x) : Returns the tangent of x radians. math.tanh(x) : Returns the hyperbolic tangent of x . math.trunc(x) : Returns the real value x truncated to an integral . Example import math print(math.pi) # 3.141592653589793 print(math.sqrt(4)) # 2.0 print(math.sin(math.pi/6)) # 0.49999999999999994 print(math.degrees(math.pi/6)) # 29.999999999999996 Reference Math Module at docs.python.org","title":"math"},{"location":"modules/math/#math-mathematical-functions","text":"This module contains mathematical operations. In order to use these functions, you should import math at the start of your file.","title":"math \u2014 Mathematical Functions"},{"location":"modules/math/#constants","text":"math.e : The mathematical constant e = 2.718281... to available precision. math.pi : The mathematical constant \u03c0 = 3.141592... to available precision.","title":"Constants"},{"location":"modules/math/#some-functions","text":"math.acos(x) : Returns the arccosine of x in radians. math.acosh(x) : Returns the inverse hyperbolic cosine of x . math.asin(x) : Returns the arcsine of x in radians. math.asinh(x) : Returns the inverse hyperbolic sine of x . math.atan(x) : Returns the arctangent of x in radians. math.atan2(y, x) : Returns atan(y / x) in radians. The result is between -pi and pi. math.atanh(x) : Returns the inverse hyperbolic tangent of x . math.ceil(x) : Returns the ceiling of x as a float, which is the smallest integer value greater than or equal to x . math.copysign(x, y) : Returns x with the sign of y . On a platform that supports signed zeros, copysign(1.0, -0.0) returns -1.0. math.cos(x) : Returns the cosine of x radians. math.cosh(x) : Returns the hyperbolic cosine of x . math.degrees(x) : Converts angle x from radians to degrees. math.exp(x) : Returns e** x . math.fabs(x) : Returns the absolute value of x . math.factorial(x) : Returns x factorial. math.floor(x) : Returns the floor of x as a float, the largest integer value less than or equal to x . math.hypot(x, y) : Returns the Euclidean norm, sqrt(x*x + y*y) . This is the length of the vector from the origin to point (x, y) . math.log(x[,base]) : With one argument, the function returns the natural logarithm of x (to base e ). With two arguments, it returns the logarithm of x to the given base, calculated as log(x)/log(base) . math.log10(x) : Returns the base-10 logarithm of x . This is usually more accurate than log(x, 10) . math.pow(x, y) : Returns x raised to the power y . math.radians : Converts angle x from degrees to radians. math.sin(x) : Returns the sine of x radians. math.sinh(x) : Returns the hyperbolic sine of x . math.sqrt(x) : Returns the square root of x . math.tan(x) : Returns the tangent of x radians. math.tanh(x) : Returns the hyperbolic tangent of x . math.trunc(x) : Returns the real value x truncated to an integral .","title":"Some Functions"},{"location":"modules/math/#example","text":"import math print(math.pi) # 3.141592653589793 print(math.sqrt(4)) # 2.0 print(math.sin(math.pi/6)) # 0.49999999999999994 print(math.degrees(math.pi/6)) # 29.999999999999996","title":"Example"},{"location":"modules/math/#reference","text":"Math Module at docs.python.org","title":"Reference"},{"location":"modules/random/","text":"random \u2014 Generate Pseudo-Random Numbers This module implements functions of the random module. It contains pseudo-random number generators for various distributions. To use this module, make sure include import random first. Some Functions random.choice(seq) : Returns a random element from the non-empty sequence seq . random.randint(a, b) : Returns a random integer N such that a = N = b . random.random : Returns the next random floating point number in the range [0.0, 1.0). random.randrange(stop) : See below. random.randrange(start, stop[, step]) : Returns a randomly selected element from range(start, stop, step) . This is equivalent to choice( range(start, stop, step) ) . random.sample(population, k) : Returns a k length list of unique elements chosen from the population sequence. random.seed(x) : Initializes the random number generator. random.shuffle(x) : Shuffles the sequence x in place. random.triangular(low, high, mode) : Returns a random floating point number N such that low = N = high and with the specified mode. random.uniform(a, b) : Returns a random floating point number N such that a = N = b for a = b and b = N = a for b a. Example import random lst = [1, 2, 3, 4, 5] print(random.choice(lst)) print(random.randint(1, 10)) print(random.random()) random.shuffle(lst) print(random.sample(lst, 2)) print(lst) print(random.sample(range(100), 10)) Reference Random Module at docs.python.org","title":"random"},{"location":"modules/random/#random-generate-pseudo-random-numbers","text":"This module implements functions of the random module. It contains pseudo-random number generators for various distributions. To use this module, make sure include import random first.","title":"random \u2014 Generate Pseudo-Random Numbers"},{"location":"modules/random/#some-functions","text":"random.choice(seq) : Returns a random element from the non-empty sequence seq . random.randint(a, b) : Returns a random integer N such that a = N = b . random.random : Returns the next random floating point number in the range [0.0, 1.0). random.randrange(stop) : See below. random.randrange(start, stop[, step]) : Returns a randomly selected element from range(start, stop, step) . This is equivalent to choice( range(start, stop, step) ) . random.sample(population, k) : Returns a k length list of unique elements chosen from the population sequence. random.seed(x) : Initializes the random number generator. random.shuffle(x) : Shuffles the sequence x in place. random.triangular(low, high, mode) : Returns a random floating point number N such that low = N = high and with the specified mode. random.uniform(a, b) : Returns a random floating point number N such that a = N = b for a = b and b = N = a for b a.","title":"Some Functions"},{"location":"modules/random/#example","text":"import random lst = [1, 2, 3, 4, 5] print(random.choice(lst)) print(random.randint(1, 10)) print(random.random()) random.shuffle(lst) print(random.sample(lst, 2)) print(lst) print(random.sample(range(100), 10))","title":"Example"},{"location":"modules/random/#reference","text":"Random Module at docs.python.org","title":"Reference"},{"location":"modules/string/","text":"string - Common String Operations The string module contains useful constants and functions. Constants string.ascii_letters : The concatenation of the ascii_lowercase and ascii_uppercase constants described below. string.ascii_lowercase : The lowercase letters abcdefghijklmnopqrstuvwxyz . This value is not locale-dependent and will not change. string.ascii_uppercase : The uppercase letters ABCDEFGHIJKLMNOPQRSTUVWXYZ . This value is not locale-dependent and will not change. string.digits : The string 0123456789 . string.hexdigits : The string 0123456789abcdefABCDEF . string.letters : The concatenation of the strings lowercase and uppercase described below. string.octdigits : The string 01234567 . string.punctuation : String of ASCII characters that consist of punctuation characters. string.printable : String of characters which are considered printable. This is a combination of digits, letters, punctuation, and whitespace. string.whitespace : A string containing all characters that are considered whitespace. Helper Functions string.capwords(s[, sep]) : Splits the argument into words using str.split() , capitalizes each word using str.capitalize() , and joins the capitalized words using str.join() . Example import string print(string.ascii_letters) # abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.ascii_lowercase) # abcdefghijklmnopqrstuvwxyz print(string.punctuation) # ! #$% '()*+,-./:; = ?@[\\]^_`{|}~ s = hello world print(string.capwords(s)) # Hello World Reference String Module at docs.python.org","title":"string"},{"location":"modules/string/#string-common-string-operations","text":"The string module contains useful constants and functions.","title":"string - Common String Operations"},{"location":"modules/string/#constants","text":"string.ascii_letters : The concatenation of the ascii_lowercase and ascii_uppercase constants described below. string.ascii_lowercase : The lowercase letters abcdefghijklmnopqrstuvwxyz . This value is not locale-dependent and will not change. string.ascii_uppercase : The uppercase letters ABCDEFGHIJKLMNOPQRSTUVWXYZ . This value is not locale-dependent and will not change. string.digits : The string 0123456789 . string.hexdigits : The string 0123456789abcdefABCDEF . string.letters : The concatenation of the strings lowercase and uppercase described below. string.octdigits : The string 01234567 . string.punctuation : String of ASCII characters that consist of punctuation characters. string.printable : String of characters which are considered printable. This is a combination of digits, letters, punctuation, and whitespace. string.whitespace : A string containing all characters that are considered whitespace.","title":"Constants"},{"location":"modules/string/#helper-functions","text":"string.capwords(s[, sep]) : Splits the argument into words using str.split() , capitalizes each word using str.capitalize() , and joins the capitalized words using str.join() .","title":"Helper Functions"},{"location":"modules/string/#example","text":"import string print(string.ascii_letters) # abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.ascii_lowercase) # abcdefghijklmnopqrstuvwxyz print(string.punctuation) # ! #$% '()*+,-./:; = ?@[\\]^_`{|}~ s = hello world print(string.capwords(s)) # Hello World","title":"Example"},{"location":"modules/string/#reference","text":"String Module at docs.python.org","title":"Reference"},{"location":"modules/time/","text":"time \u2014 Time access This module contains time-related functions. Attribute time.altzone : The offset of the local DST timezone, in second, west of UTC. time.daylight : Nonzero if a DST timezone is defined. time.timezone : The offset of the local (non-DST) timezone, in seconds, west of UTC (negative in most of Western Europe, positive in the US, zero in the UK). time.tzname : A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone. Functions time.asctime([t]) : Converts a tuple or struct_time representing a time as returned by gmtime() or localtime() to a 24-character string of the following form: 'Sun Jun 20 23:21:05 1993'. If t is not provided, the current time as returned by localtime() is used. time.clock() : Returns the current processor time as a floating point number expressed in seconds. time.ctime([secs]) : Converts a time expressed in seconds since the epoch to a string representing local time. If secs is not provided or None , the current time as returned by time() is used. time.gmtime([secs]) : Converts a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero. If secs is not provided or None , the current time as returned by time() is used. time.localtime([secs]) : Like gmtime() but converts to local time. If secs is not provided or None , the current time as returned by time() is used. time.mktime(t) : This is the inverse function of localtime() . Its argument is the struct_time or a full 9-tuple. time.sleep(secs) : Suspends execution of the current thread for the given number of seconds. time.time() : Returns the time in seconds since the epoch as a floating point number. Class time.struct_time : The type of the time value sequence returned by gmtime() and localtime() . Example import time print(time.timezone) print(time.altzone) print(time.ctime()) print(time.clock()) print(time.localtime()) print(time.gmtime()) print(time.tzname) # print out time every 1 second for i in range(10): print(time.asctime()) time.sleep(1) Reference Time Module - docs.python.org","title":"time"},{"location":"modules/time/#time-time-access","text":"This module contains time-related functions.","title":"time \u2014 Time access"},{"location":"modules/time/#attribute","text":"time.altzone : The offset of the local DST timezone, in second, west of UTC. time.daylight : Nonzero if a DST timezone is defined. time.timezone : The offset of the local (non-DST) timezone, in seconds, west of UTC (negative in most of Western Europe, positive in the US, zero in the UK). time.tzname : A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.","title":"Attribute"},{"location":"modules/time/#functions","text":"time.asctime([t]) : Converts a tuple or struct_time representing a time as returned by gmtime() or localtime() to a 24-character string of the following form: 'Sun Jun 20 23:21:05 1993'. If t is not provided, the current time as returned by localtime() is used. time.clock() : Returns the current processor time as a floating point number expressed in seconds. time.ctime([secs]) : Converts a time expressed in seconds since the epoch to a string representing local time. If secs is not provided or None , the current time as returned by time() is used. time.gmtime([secs]) : Converts a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero. If secs is not provided or None , the current time as returned by time() is used. time.localtime([secs]) : Like gmtime() but converts to local time. If secs is not provided or None , the current time as returned by time() is used. time.mktime(t) : This is the inverse function of localtime() . Its argument is the struct_time or a full 9-tuple. time.sleep(secs) : Suspends execution of the current thread for the given number of seconds. time.time() : Returns the time in seconds since the epoch as a floating point number.","title":"Functions"},{"location":"modules/time/#class","text":"time.struct_time : The type of the time value sequence returned by gmtime() and localtime() .","title":"Class"},{"location":"modules/time/#example","text":"import time print(time.timezone) print(time.altzone) print(time.ctime()) print(time.clock()) print(time.localtime()) print(time.gmtime()) print(time.tzname) # print out time every 1 second for i in range(10): print(time.asctime()) time.sleep(1)","title":"Example"},{"location":"modules/time/#reference","text":"Time Module - docs.python.org","title":"Reference"}]}